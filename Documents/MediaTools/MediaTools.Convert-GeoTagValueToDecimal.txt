üß≠ MediaTools.Convert-GeoTagValueToDecimal Function Documentation

Description:
Parses a single coordinate value string into a standardized, signed `[double]`. This function is a versatile dispatcher that can handle multiple common formats, such as signed decimals (`-74.0060`), decimals with a direction (`40.7128 N`), and DMS with a direction (`40 deg 42' 46" W`).

Input Type:
1. InputGeoTag [string] (Mandatory) ‚Äî The single coordinate value string to parse.

Output Type:
‚úÖ [double] ‚Äî The standardized signed decimal value.
‚ùå Throws [System.FormatException] ‚Äî If the input string format is invalid or cannot be recognized.
‚ùå Throws [System.ArgumentException] ‚Äî If the input is null or empty.

Algorithm (Pseudo-code):
1. Validate that the input is not null or empty.
2. Attempt to parse the input directly as a `[double]`. If successful, return the value.
3. If not a simple decimal, normalize any direction words (e.g., "north" to "N") using `Resolve-DirectionString`.
4. Check if the normalized string matches the pattern `value direction` (e.g., "40.7128 N").
5. If it matches, check if the `value` part is a simple number. If so, parse it and apply the sign based on the `direction`.
6. If the `value` part is not a simple number, assume it's a DMS string and pass it to `Convert-GeoTagToDecimal` for conversion.
7. If no format matches, throw a `FormatException`.

Function Calls:
üîπ Resolve-DirectionString
üîπ Convert-GeoTagToDecimal

Possible Issues:
* ‚úÖ Covered: Handles multiple formats (signed decimal, decimal with direction, DMS with direction).
* ‚úÖ Covered: Delegates specialized parsing to helper functions, promoting code reuse.
* ‚úÖ Covered: Fails fast by throwing an exception on any unrecognized format, preventing bad data.
* ‚ùå Not Covered: Does not validate if the final value is within the valid lat/lon range (-90 to +90, -180 to +180). This is the responsibility of a higher-level function.
