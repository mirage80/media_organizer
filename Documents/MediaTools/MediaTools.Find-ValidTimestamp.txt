🕓 MediaTools.Find_ValidTimestamp Function Documentation

Description:  
Determines the most reliable timestamp for a media file by checking multiple sources in a specific priority order. It returns the first valid timestamp it finds, avoiding unnecessary work.

Input Type:
1. File [System.IO.FileInfo] (Mandatory) — The media file to process.
2. TimeoutSeconds [int] (Optional, Default: 60) — The timeout to pass down to underlying processes (ExifTool, ffprobe).

Output Type:  
✅ [string] — The best available timestamp in the module's standard format.
❌ Throws [System.FormatException] — If no valid timestamp can be found from any source.

Algorithm (Pseudo-code):
1. **Check JSON Sidecar:** Attempt to get a timestamp using `Get-JsonTimestamp`. If a valid timestamp is returned, return it immediately.
2. **Check EXIF Data:** Attempt to get a timestamp using `Get-ExifTimestamp`. If a valid timestamp is returned, return it immediately.
3. **Check FFprobe Data (for videos):** If the file is a video, attempt to get a timestamp using `Get-FfprobeTimestamp`. If a valid timestamp is returned, return it immediately.
4. **Check Filename:** As a last resort, attempt to parse the filename using `Get-FilenameTimestamp`. If a valid timestamp is returned, return it.
5. **Failure:** If all sources have been checked and none provided a valid timestamp, log a warning and throw a `FormatException`.

Function Calls:
🔹 Get-JsonTimestamp
🔹 Get-ExifTimestamp
🔹 Get-FfprobeTimestamp
🔹 Get-FilenameTimestamp
🔹 Test-Timestamp

Possible Issues:
* ✅ Covered: Highly efficient "short-circuit" logic stops as soon as a valid timestamp is found.
* ✅ Covered: A clear priority order (JSON > EXIF > FFprobe > Filename) ensures the most reliable data is used.
* ✅ Covered: Fails fast by throwing an exception if no valid data can be found anywhere.
* ❌ Not Covered: The function does not compare timestamps between sources; it trusts the first valid one it finds based on the priority list.
