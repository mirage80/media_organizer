üì∏ MediaTools.Get-ExifDataAsJson Function Documentation

Description:
Performs a highly optimized read of all potential timestamp and geotag fields from a media file using a single ExifTool command. It aggregates the required fields from the module's global dictionaries to minimize process overhead.

Input Type:

1. File [System.IO.FileInfo] (Mandatory) ‚Äî The media file to process.
2. TimeoutSeconds [int] (Optional, Default: 60) ‚Äî The timeout to pass down to the underlying ExifTool process.

Output Type:

‚úÖ [PSCustomObject] ‚Äî A custom object containing the `FilePath` and the parsed `ExifData` object.
‚ùå Returns `$null` if the ExifTool process fails or the output cannot be parsed.

1. Aggregate all unique field names from the module's `$TimeStampFields` and `$gpsFields` dictionaries.
2. Construct the ExifTool arguments array, including `-json`, `-G`, `-s`, and the list of all fields to fetch.
3. Call `Invoke-ExifToolProcess` with the arguments and the file path, passing down the `TimeoutSeconds`.
4. If the process returns a valid JSON string:
   a. Parse it using `ConvertFrom-Json`.
   b. Return a new `PSCustomObject` containing the file path and the parsed data.
5. If the process or parsing fails, return `$null`.

Function Calls:

üîπ Invoke-ExifToolProcess

Possible Issues:

* ‚úÖ Covered: Highly efficient by fetching all required metadata in a single ExifTool call.
* ‚úÖ Covered: Delegates the actual process execution to the robust, timeout-protected `Invoke-ExifToolProcess` function.
* ‚úÖ Covered: Returns a structured object that is easy for calling functions to use.
* ‚ùå Not Covered: If a required field is not defined in the global dictionaries, it will not be fetched.

