📍 MediaTools.Format-GeoTag Function Documentation

Description:
Converts a geotag string from various common formats into a single, standard 4-part string: `latitude,latitudeRef,longitude,longitudeRef` (e.g., `40.7128,N,74.0060,W`).

Input Type:
1. InputGeoTag [string] (Mandatory) — The geotag string to standardize. Supported formats include:
   - 4-part: `"40.7128, N, 74.0060, W"`
   - 2-part signed decimal: `"40.7128, -74.0060"`
   - ISO 6709: `"+40.7128-074.0060/"`

Output Type:
✅ [string] — The standardized 4-part geotag string.
✅ Returns a default "zero geotag" if the input is null or empty.
❌ Throws [System.FormatException] — If the input string is not in a recognized format.

Algorithm (Pseudo-code):
1. If input is null or empty, return the default zero geotag.
2. Check if the input matches the single-string ISO 6709 format. If so, parse it and construct the 4-part string.
3. If not ISO 6709, split the string by commas.
4. Use a `switch` on the number of parts:
   a. **4 parts:** Validate that numbers are positive and refs are valid (N/S/E/W). Return the standardized string.
   b. **2 parts:** Treat as signed decimal latitude and longitude. Use `Convert-GeoTagValueToDecimal` on each part, then determine the ref and absolute value. Construct the 4-part string.
   c. **Default:** If not 2 or 4 parts, throw a `FormatException`.
5. If any step fails, catch the error, log it, and re-throw a `FormatException`.

Function Calls:
🔹 Convert-GeoTagValueToDecimal
🔹 Get-LatitudeReference
🔹 Get-LongitudeReference

Possible Issues:
* ✅ Covered: Handles multiple common geotag formats.
* ✅ Covered: Validates the components of a 4-part geotag for correctness.
* ✅ Covered: Fails fast by throwing an exception on any unrecognized format.
* ✅ Covered: Returns a safe, default value for null or empty input.
* ❌ Not Covered: Does not validate if the final coordinate values are within the valid lat/lon range (-90 to +90, -180 to +180). This is the responsibility of `Test-GeoTag`.
