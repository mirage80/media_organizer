📸 MediaTools.Get-ExifTimestamp Function Documentation

Description:
Extracts and returns the most relevant timestamp from a file's Exif metadata. It fetches all potential timestamp fields at once for performance and then iterates through a prioritized list to find the first valid one.

Input Type:
1. File [System.IO.FileInfo] (Mandatory) — The media file to process.
2. TimeoutSeconds [int] (Optional, Default: 60) — The timeout to pass down to the underlying ExifTool process.

Output Type:
✅ [string] — Timestamp in format "yyyy:MM:dd HH:mm:ss+00:00"
❌ Returns `$null` if no valid timestamp is found in any of the prioritized fields.

Algorithm (Pseudo-code):
1. Get the prioritized list of timestamp field names for the file's extension using `Get-FieldsByExtension`.
2. Call `Get_ExifDataAsJson` once to get a cached or fresh object containing all required Exif data.
3. If no data is returned, return `$null`.
4. Loop through the prioritized list of field names.
5. For each field name, search for a matching property in the Exif data object (e.g., `EXIF:DateTimeOriginal`).
6. If a property is found, check if its value is a valid timestamp using `Test-Timestamp`.
7. If it is valid, pass the value to `Format-Timestamp` and return the result immediately.
8. If the loop completes without finding a valid timestamp, return `$null`.

Function Calls:
🔹 Get-FieldsByExtension
🔹 Get_ExifDataAsJson
🔹 Test-Timestamp
🔹 Format-Timestamp

Possible Issues:
* ✅ Covered: Highly efficient by fetching all Exif data in a single process call.
* ✅ Covered: Correctly uses a prioritized list of fields to find the most reliable timestamp.
* ✅ Covered: Ensures all output is in the module's canonical format by using `Format-Timestamp`.