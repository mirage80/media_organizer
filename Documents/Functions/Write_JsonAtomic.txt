### Write_JsonAtomic Function Documentation

Function:
Write_JsonAtomic

Description:
Safely writes a JSON object to a file using a temporary file and atomic move to prevent partial writes or corruption.

Input Type:

1. JsonObject [object] ‚Äî Data to serialize and write
2. TargetPath [string] ‚Äî Destination file path
3. Indent [bool] ‚Äî Whether to format the JSON with indentation (default: $true)

Output Type:
‚úÖ [void] ‚Äî JSON file is written successfully
‚ùå Throws on serialization or file I/O errors unless caught externally

Algorithm (Pseudo-code):

1. Validate Inputs
   1.1 If JsonObject is null ‚Üí throw
   1.2 If TargetPath is null or empty ‚Üí throw

2. Determine Temp Path
   2.1 Create $tempPath by appending .tmp to TargetPath

3. Convert to JSON
   3.1 If Indent is true ‚Üí call ConvertTo-Json -Depth 100 -Compress:$false
   3.2 Else ‚Üí call ConvertTo-Json -Depth 100 -Compress:$true
   üîπ Purpose: Convert input object to JSON text

4. Write to Temp File
   4.1 Use Set-Content or Out-File to write JSON to $tempPath

5. Atomically Replace Original File
   5.1 Use Move-Item -Force to replace TargetPath with $tempPath

Function Calls:

* ConvertTo-Json ‚Üí Serializes the object
* Move-Item ‚Üí Used for atomic replacement
* Set-Content or Out-File ‚Üí Writes content to temporary file (may be implicit)

Possible Issues:

* ‚úÖ Covered: Indentation option
* ‚úÖ Covered: Atomic write via temp file
* ‚úÖ Covered: Replaces existing file
* ‚ùå Not Covered: Serialization errors (e.g. cyclic references)
* ‚ùå Not Covered: Target path directory does not exist
* ‚ùå Not Covered: File write permission denied
* ‚ùå Not Covered: Simultaneous write by another process
* ‚ùå Not Covered: File system full or I/O errors