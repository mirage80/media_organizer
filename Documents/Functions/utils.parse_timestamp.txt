`utils.parse_timestamp` Function Documentation

Function:
parse_timestamp

Description:
Attempts to parse a timestamp string into a `datetime` object with UTC offset. If parsing fails or input is invalid, returns `None`.

Input Type:

1. timestamp_str [str] — Timestamp string to be parsed

Output Type:
✅ [datetime.datetime] (timezone-aware in UTC)
❌ None on parsing failure or if input is not a valid timestamp

Algorithm (Pseudo-code):

1. Validate Input
   1.1 If `timestamp_str` is `None` or empty → ❌ return `None`

2. Normalize String
   2.1 If `timestamp_str` ends with `'Z'` → Replace with `'+00:00'`
   2.2 Remove leading/trailing spaces

3. Try Parsing as ISO Format
   3.1 Try `datetime.fromisoformat(timestamp_str)`
       🔹 If succeeds → Go to step 4
       🔹 If fails → Continue

4. Fallback Parsing
   4.1 Try `datetime.strptime(timestamp_str, "%Y:%m:%d %H:%M:%S%z")`
       🔹 If succeeds → Go to step 5
       🔹 If fails → ❌ return `None`

5. Normalize Result
   5.1 Set `tzinfo` to UTC if not already set
   5.2 ✅ Return parsed `datetime` object

Function Calls:

* 🔹 datetime.fromisoformat() — First attempt to parse
* 🔹 datetime.strptime() — Fallback parser
* 🔹 datetime.replace(tzinfo=timezone.utc) — Normalize to UTC

Possible Issues:

* ✅ Covered: Handles `'Z'` (Zulu) suffix
* ✅ Covered: Returns `None` on parse failure
* ✅ Covered: Validates empty input
* ❌ Not Covered: Partial or malformed timestamp formats
* ❌ Not Covered: Non-ASCII symbols in timestamp
* ❌ Not Covered: Input with extra fields (e.g., milliseconds, microseconds)