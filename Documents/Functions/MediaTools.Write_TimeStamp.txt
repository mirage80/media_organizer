Function:
Write_TimeStamp

Description:
Writes the creation timestamp metadata into the provided media file using ExifTool. Supports dry-run simulation or actual write.

Input Type:

1. file [string] — Path to the media file whose timestamp is being written.
2. timestamp [string] — Timestamp string in standard format "yyyy:MM:dd HH:mm:ss+00:00".
3. ExifToolPath [string] — Path to the ExifTool binary.
4. dry_run [bool] — If true, only logs the intended action.
5. log_only [bool] — If true, logs the action but skips execution.

Output Type:
✅ [void] — Writes or simulates writing timestamp metadata
❌ Throws error if inputs are invalid or tool path/file does not exist

Algorithm:

1. Validate Inputs
   1.1. If file is missing or doesn’t exist → throw error
   1.2. If ExifToolPath is missing or doesn’t exist → throw error
   1.3. If timestamp is $null or empty → log warning and return

2. Build ExifTool command
   2.1. Construct command string with multiple fields:
        - "-AllDates=$timestamp"
        - "-DateTimeOriginal=$timestamp"
        - "-MediaCreateDate=$timestamp"
        - "-CreateDate=$timestamp"
        - "-ModifyDate=$timestamp"
        - "-TrackCreateDate=$timestamp"
        - "-TrackModifyDate=$timestamp"
        - "-FileModifyDate=$timestamp"
        - "-overwrite_original"

3. Log Action
   3.1. Call $MediaToolsLogger.Write-Log for DEBUG and INFO levels

4. Execute or Simulate
   4.1. If dry_run or log_only → log command only, skip execution
   4.2. Otherwise → execute using Start-Process -Wait -NoNewWindow

Function Calls:

- $MediaToolsLogger.Write-Log — Logs actions and warnings

Possible Issues:

- ✅ Covered: Invalid file path (checked)
- ✅ Covered: Invalid or missing ExifToolPath (checked)
- ✅ Covered: Null or empty timestamp (warns and exits)
- ✅ Covered: Logging on both dry-run and actual execution
- ❌ Not Covered: No validation of timestamp format
- ❌ Not Covered: No error capture if ExifTool execution fails
- ✅ Covered: Multiple EXIF fields are targeted for timestamp injection
