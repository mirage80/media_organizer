### 🧰 `utils.setup_logging` Function Documentation

**Function:**
`setup_logging`

**Description:**
Initializes and configures the global logger with file and optional console handlers using a standardized format and log level.

**Input Type:**

1. `log_file_path` `[str]` — Full path to the desired log file
2. `console` `[bool]` — Whether to enable logging to console (default: `False`)
3. `level` `[str]` — Logging level (e.g., `"INFO"`, `"DEBUG"`)

**Output Type:**
✅ `[logging.Logger]` — Configured global logger instance
❌ Raises `ValueError` if invalid log level is provided

**Algorithm (Pseudo-code):**

1. Call `logging.getLogger()` to get the global logger
2. Set logger level using `level.upper()`
   2.1 If invalid → ❌ raise `ValueError`
3. Create formatter with format:
   `%(asctime)s [%(levelname)s] %(message)s`
4. Create and add `FileHandler`
   4.1 Assign formatter
   4.2 Attach to logger
5. If `console == True`
   5.1 Create `StreamHandler`
   5.2 Assign formatter
   5.3 Attach to logger
6. ✅ Return logger instance

**Function Calls:**

* 🔹 `logging.getLogger()` — retrieve the root logger
* 🔹 `logging.FileHandler()` — write logs to file
* 🔹 `logging.StreamHandler()` — optional console output

**Possible Issues:**

* **Covered**: File output setup
* **Covered**: Optional console logging
* **Covered**: Log level parsing and validation
* **Not Covered**: File write permission errors
* **Not Covered**: Duplicate handler prevention on repeated calls
* **Not Covered**: Caller confusion due to global logger reuse