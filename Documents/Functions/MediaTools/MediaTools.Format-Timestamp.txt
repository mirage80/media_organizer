🕒 MediaTools.Format-Timestamp Function Documentation

Description:
Parses and sanitizes a raw timestamp string from various, often malformed, real-world formats into a single, standard format (`yyyy:MM:dd HH:mm:sszzz`). It uses a sophisticated pipeline to clean the input before attempting to parse it.

Input Type:
1. InputTimestamp [string] (Mandatory) — The raw timestamp string to standardize.
2. OutputFormat [string] (Optional, Default: "yyyy:MM:dd HH:mm:sszzz") — The desired output format string.

Output Type:
✅ [string] — The standardized timestamp string.
✅ Returns a default "zero timestamp" if the input is null, empty, or a known zero-date.
❌ Throws [System.FormatException] — If the input string cannot be parsed into a valid date after sanitization.

Algorithm (Pseudo-code):
1. Handle null, empty, or known zero-date inputs by returning the module's default zero timestamp.
2. Sanitize the string by removing any non-ASCII characters.
3. Normalize UTC 'Z' suffix to a standard `+00:00` offset.
4. Detect and extract any trailing time zone abbreviation (e.g., "PST", "EDT").
5. Remove known-bad patterns, such as a spurious, repeated " 00:00:00".
6. Normalize all whitespace.
7. If a time zone abbreviation was found, use `Get_TimeZoneOffset` to convert it to a numeric offset (e.g., "-08:00").
8. If the timestamp does not already have a numeric offset, append the one determined in the previous step (or `+00:00` by default).
9. Loop through a predefined list of common date/time formats and attempt to parse the sanitized string using `[datetimeoffset]::ParseExact` with a culture-invariant setting.
10. On the first successful parse, format the result to the desired output format and return it.
11. If all parsing attempts fail, log a warning and throw a `FormatException`.

Function Calls:
🔹 Get_TimeZoneOffset

Possible Issues:
* ✅ Covered: Handles a wide variety of real-world timestamp formats and malformations.
* ✅ Covered: Correctly translates common time zone abbreviations (PST, EDT, etc.) to their proper UTC offsets.
* ✅ Covered: Parsing is culture-invariant, ensuring consistent behavior on any system.
* ✅ Covered: Fails fast by throwing an exception on any timestamp that cannot be definitively parsed.
