üì∏ MediaTools.Invoke-ExifTool Function Documentation

Description:
A high-performance, caching wrapper for ExifTool. It intelligently intercepts read and write operations. For reads, it serves data from a session-level cache. For writes, it stages the change in the cache without writing to the file, deferring the actual write to a future "flush" operation.

Input Type:
1. File [System.IO.FileInfo] (Mandatory) ‚Äî The media file to process.
2. arguments [Object[]] ‚Äî An array of command-line arguments to pass to ExifTool.
3. type [string] (Optional, Default: "execute") ‚Äî Specifies how to process the output for read operations.
4. TimeoutSeconds [int] (Optional, Default: 60) ‚Äî The timeout to pass down to underlying processes if a cache miss occurs.

Output Type:
‚úÖ [string] or [PSCustomObject] ‚Äî For read operations, returns the requested value from the cache.
‚úÖ [void] ‚Äî For write operations, returns nothing.

Algorithm:
1. Detect if the operation is a read or a write based on the arguments (e.g., `-TagName=Value` is a write).
2. **If Write Operation:**
   a. Ensure the file's full metadata is in the cache (call `Get_ExifDataAsJson` if not).
   b. Update the specific tag's value in the cached `PSCustomObject`.
   c. Log the "staged" write and return. No file is modified.
3. **If Read Operation:**
   a. Check the cache for the file's data. If it's a miss, call `Get_ExifDataAsJson` to populate the cache.
   b. Retrieve the requested tag from the cached data and return it, standardizing if the `type` is "timestamp" or "geotag".

Function Calls:
üîπ Get_ExifDataAsJson
üîπ Invoke_ExifToolProcess (for complex, non-cached reads)

Possible Issues:
* ‚úÖ Covered: Caching significantly improves performance for repeated read operations.
* ‚úÖ Covered: Write operations are safely staged in memory without modifying the file on disk.
* ‚ùå Not Covered: A separate function (e.g., `Flush-CachedMetadata`) is required to persist the staged changes to disk.
