🗺️ MediaTools.Find-ValidGeotag Function Documentation

Description:
Determines the most reliable geotag for a media file by checking multiple sources in a specific priority order. It returns the first valid geotag it finds, avoiding unnecessary work.

Input Type:
1. File [System.IO.FileInfo] (Mandatory) — The media file to process.
2. TimeoutSeconds [int] (Optional, Default: 60) — The timeout to pass down to underlying processes (ExifTool, ffprobe).

Output Type:
✅ [string] — The best available geotag in the module's standard 4-part format.
❌ Throws [System.FormatException] — If no valid geotag can be found from any source.

Algorithm (Pseudo-code):
1. **Check JSON Sidecar:** Attempt to get a geotag using `Get-JsonGeotag`. If a valid geotag is returned, return it immediately.
2. **Check EXIF Data:** Attempt to get a geotag using `Get-ExifGeotag`. If a valid geotag is returned, return it immediately.
3. **Check FFprobe Data (for videos):** If the file is a video, attempt to get a geotag using `Get-FfprobeGeotag`. If a valid geotag is returned, return it immediately.
4. **Failure:** If all sources have been checked and none provided a valid geotag, log a warning and throw a `FormatException`.

Function Calls:
🔹 Get-JsonGeotag
🔹 Get-ExifGeotag
🔹 Get-FfprobeGeotag
🔹 Test-GeoTag

Possible Issues:
* ✅ Covered: Highly efficient "short-circuit" logic stops as soon as a valid geotag is found.
* ✅ Covered: A clear priority order (JSON > EXIF > FFprobe) ensures the most reliable data is used.
* ✅ Covered: Fails fast by throwing an exception if no valid data can be found anywhere.
* ❌ Not Covered: The function does not compare geotags between sources; it trusts the first valid one it finds based on the priority list.
