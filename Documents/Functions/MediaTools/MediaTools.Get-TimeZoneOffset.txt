⏱️ MediaTools.Get-TimeZoneOffset Function Documentation

Function:
Get-TimeZoneOffset

Description:
Converts a common time zone abbreviation (e.g., "PST", "EDT") into its corresponding fixed UTC offset string (e.g., "-08:00", "-04:00"). This function is designed to be "bullet proof" by strictly enforcing its list of known abbreviations.

Input Type:
1. timeZoneAbbreviation [string] (Mandatory) — The time zone abbreviation to convert. The lookup is case-insensitive.

Output Type:
✅ [string] — The UTC offset in `+HH:mm` or `-HH:mm` format if the abbreviation is recognized.
❌ Throws [System.FormatException] — If the `timeZoneAbbreviation` is not in the predefined list of supported time zones.

Algorithm (Pseudo-code):
1. Convert the input `timeZoneAbbreviation` to uppercase for a case-insensitive match.
2. Look up the uppercase abbreviation in a predefined, internal map of common time zones to their fixed UTC offsets.
3. If a match is found, return the corresponding offset string (e.g., "PDT" -> "-07:00").
4. If no match is found:
   a. Log an ERROR message.
   b. Throw a `[System.FormatException]` to immediately halt processing and signal the failure to the calling script.

Function Calls:
None.

Possible Issues:
* ✅ Covered: Correctly handles both standard and daylight saving time abbreviations (e.g., "PST" vs "PDT").
* ✅ Covered: Case-insensitive matching for the abbreviation (e.g., "pst" works).
* ✅ Covered: Platform-independent; does not rely on the host OS time zone database.
* ✅ Covered: Fails fast on unknown abbreviations. The function will throw a `FormatException` for any abbreviation not in its predefined list (e.g., most non-North American time zones), forcing the calling script to handle the error.
