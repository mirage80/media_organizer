üìÅ MediaTools.Invoke-ExifToolProcess Function Documentation

**Description:**  
Executes ExifTool with full process control. This function is the low-level interface for executing raw ExifTool commands with timeout, retry logic, and output capture. It is used internally by higher-level ExifTool wrappers.

---

**Input Type:**  
1. `file [System.IO.FileInfo]` (Mandatory) ‚Äî The media file to pass to ExifTool.  
2. `arguments [Object[]]` ‚Äî The list of arguments to pass to ExifTool.  
3. `type [string]` (Optional, Default: `"execute"`) ‚Äî A label for the type of operation (for logging only).  
4. `maxRetries [int]` (Optional, Default: `3`) ‚Äî The number of retry attempts if ExifTool fails.  
5. `retryDelay [int]` (Optional, Default: `10`) ‚Äî Seconds to wait between retries.  
6. `TimeoutSeconds [int]` (Optional, Default: `60`) ‚Äî Timeout for the ExifTool process.

---

**Output Type:**  
‚úÖ `[object]` ‚Äî The captured stdout from the ExifTool process.  
‚ùå Throws `[System.Exception]` ‚Äî If the process fails, times out, or exceeds retry limit.

---

**Algorithm (Pseudo-code):**  
1. Build the full ExifTool command string from `arguments` and `file.FullName`.  
2. Execute the ExifTool process using PowerShell‚Äôs `Start-Process`, with specified timeout.  
3. Capture and log the stdout and stderr.  
4. If the process fails or times out:  
   a. Retry up to `maxRetries` times.  
   b. Wait `retryDelay` seconds between retries.  
5. If all retries fail, throw an error.

---

**Function Calls:**  
üîπ None (this is a leaf-level function)

---

**Possible Issues:**  
‚úÖ Covered: Supports retry and delay mechanism for flaky ExifTool responses.  
‚úÖ Covered: Timeout enforcement prevents indefinite blocking.  
‚úÖ Covered: Logs and raises exceptions clearly on failure.  
‚ùå Not Covered: Does not inspect or validate the output contents‚Äîit only checks for process-level success.
