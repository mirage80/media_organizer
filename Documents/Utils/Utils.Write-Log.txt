Utils.Write-Log Function Documentation

Description:
Writes a formatted message to both the console and a file, respecting log level filters and ensuring thread-safe file output.

Input Type:
1. Level [string] — Log level as string (e.g., "DEBUG", "INFO", "WARNING", "ERROR")
2. Message [string] — The log message content
3. LogFilePath [string] — Path to the log file
4. ConsoleLogLevel [int] — Current verbosity threshold for console output
5. FileLogLevel [int] — Current verbosity threshold for file output
6. LogLevelMap [hashtable] — Map of log level string to numeric severity

Output Type:
✅ [void] — Writes messages to console and/or file, depending on severity thresholds

Algorithm (Pseudo-code):
1. Extract parent directory from log file path.
2. If log directory does not exist:
    a. Attempt to create it using New-Item.
3. Get numeric log level from $LogLevelMap using the input $Level.
4. Format the message as: [TIMESTAMP] [LEVEL] Message.
5. If numeric log level ≤ $ConsoleLogLevel:
    a. Output to standard error if level is WARNING/ERROR, else to standard output.
6. If numeric log level ≤ $FileLogLevel:
    a. Acquire thread-safe lock using [System.Threading.Monitor]::Enter.
    b. Write formatted message to log file using Add-Content.
    c. Release lock using [System.Threading.Monitor]::Exit.
7. Catch and suppress any file writing exceptions with try/catch.

Function Calls:
None

Possible Issues:
✅ Covered: Missing log directory is auto-created  
✅ Covered: Thread-safe writes via locking  
✅ Covered: Level filtering for both console and file  
✅ Covered: Output streams vary by level (stderr vs stdout)  
❌ Not Covered: Long path or filename errors  
❌ Not Covered: LogLevelMap missing or malformed  
❌ Not Covered: File write failure across remapped drives
