Utils.Write-JsonAtomic Function Documentation

Description:
Writes a JSON file atomically by writing to a temporary file first and then renaming it to the target path. Validates the JSON content before replacement to prevent corrupted writes.

Input Type:
1. Data [object] ‚Äî The PowerShell object to serialize as JSON. Cannot be null.
2. Path [string] ‚Äî The destination file path for the JSON output. Cannot be null or empty.

Output Type:
‚úÖ [void] ‚Äî Writes JSON content atomically to disk, logs success or failure.

Algorithm (Pseudo-code):
1. Check if Data is null; throw an exception if so.
2. Check if Path is null or empty; throw an exception if so.
3. Create a temporary file path by appending '.tmp' to the target path.
4. Serialize the Data object to JSON with depth 10.
5. Write the JSON content to the temporary file with UTF8 encoding.
6. Validate the JSON by reading back and parsing it.
7. Rename the temporary file to the final Path atomically, overwriting any existing file.
8. Log success using $script:UtilsLogger.
9. On any error:
    a. Log failure with error details.
    b. Remove the temporary file if it exists.

Function Calls:
üîπ Utils.Write-Log

Possible Issues:
‚úÖ Covered: Prevents partial file writes by using atomic rename.
‚úÖ Covered: Validates JSON to avoid corrupted writes.
‚úÖ Covered: Explicitly checks that input parameters are not null or empty.
‚ùå Not Covered: Fails silently if $script:UtilsLogger is null or invalid.
